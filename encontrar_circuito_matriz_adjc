algoritmo encontrar_circuito(Grafo: matriz de booleanos) -> booleano ==> O( n + m ) // devido a recursividade da função tem circuito.
    n <- tamanho(Grafo)
    estado <- vetor de enumeração com tamanho n, inicializado com "nao_atingido" 
    // aqui começamos com todos nao atingidos.
    
    para cada vértice v em V faça ==> O(n)
        se estado[v] = "nao_atingido" então ==> O(n)
            se tem_circuito(v, Grafo, estado) então => O( 1 mininmo ) ==> O( n total )
            // percorrendo o grafo e chamando a funçao principal.
                retorne verdadeiro
                // retornando verdadeiro se encontrar um circuito no grafo. 

    retorne falso
    // aqui é caso nao tenha sido encontrado um circuito.

função tem_circuito(v: inteiro, Grafo: matriz de booleanos, estado: vetor de enumeração) -> booleano ==> O( n + m ) // pq nao tem nenhum para com m ou n no total juntos, so soma.
    // marcamos o estado como no caminho atual, ou seja, percorrendo ele.
    estado[v] <- "no_caminho" ==> O(1) ==> O(n total)

    para cada vértice u vizinho de v faça ==> O(+du grau de saida) ==> O(m total)
    // pegando os vizinhos de saida do grafo direcionado, nos conferimos se esta no caminho atual.
        se estado[u] = "no_caminho" então ==> O(+du grau de saida) ==> O(m total)
            // se estiver, é um circuito.
            retorne verdadeiro
        senão se estado[u] = "nao_atingido" então ==> O(+du grau de saida) ==> O(m total)
            // agora, se estiver nao atingido...
            se tem_circuito(u, Grafo, estado) então ==> O(+du grau de saida) ==> O(m total)
                // mas chamarmos recursivamente a funçao, e tiver de fato um circuito, retornamos verdadeiro.
                retorne verdadeiro

    estado[v] <- "finalizado" ==> O(1) ==> O(n total)
    // marcamos como finalizado o vertice.
    retorne falso

Algoritmo principal
    n <- número de vértices do grafo
    Grafo <- matriz de adjacências do grafo

    possui_circuito <- encontrar_circuito(Grafo)
    // possui ciurcuito seria mais para uma visualização clara do funcionamento do algoritmo.

    se possui_circuito então
        imprima "O grafo possui um circuito"
    senão
        imprima "O grafo não possui circuito"
